package history

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetHistoryEventsParams creates a new GetHistoryEventsParams object
// with the default values initialized.
func NewGetHistoryEventsParams() *GetHistoryEventsParams {
	var ()
	return &GetHistoryEventsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetHistoryEventsParamsWithTimeout creates a new GetHistoryEventsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetHistoryEventsParamsWithTimeout(timeout time.Duration) *GetHistoryEventsParams {
	var ()
	return &GetHistoryEventsParams{

		timeout: timeout,
	}
}

// NewGetHistoryEventsParamsWithContext creates a new GetHistoryEventsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetHistoryEventsParamsWithContext(ctx context.Context) *GetHistoryEventsParams {
	var ()
	return &GetHistoryEventsParams{

		Context: ctx,
	}
}

// NewGetHistoryEventsParamsWithHTTPClient creates a new GetHistoryEventsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetHistoryEventsParamsWithHTTPClient(client *http.Client) *GetHistoryEventsParams {
	var ()
	return &GetHistoryEventsParams{
		HTTPClient: client,
	}
}

/*GetHistoryEventsParams contains all the parameters to send to the API endpoint
for the get history events operation typically these are written to a http.Request
*/
type GetHistoryEventsParams struct {

	/*Count
	  Allow a count parameter to specify the number of events to get from the log. Defaults to 50

	*/
	Count *float64
	/*Offset
	  Allow an offset parameter to specify the start in the history to get events from. Defaults to 0

	*/
	Offset *float64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get history events params
func (o *GetHistoryEventsParams) WithTimeout(timeout time.Duration) *GetHistoryEventsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get history events params
func (o *GetHistoryEventsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get history events params
func (o *GetHistoryEventsParams) WithContext(ctx context.Context) *GetHistoryEventsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get history events params
func (o *GetHistoryEventsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get history events params
func (o *GetHistoryEventsParams) WithHTTPClient(client *http.Client) *GetHistoryEventsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get history events params
func (o *GetHistoryEventsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCount adds the count to the get history events params
func (o *GetHistoryEventsParams) WithCount(count *float64) *GetHistoryEventsParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the get history events params
func (o *GetHistoryEventsParams) SetCount(count *float64) {
	o.Count = count
}

// WithOffset adds the offset to the get history events params
func (o *GetHistoryEventsParams) WithOffset(offset *float64) *GetHistoryEventsParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get history events params
func (o *GetHistoryEventsParams) SetOffset(offset *float64) {
	o.Offset = offset
}

// WriteToRequest writes these params to a swagger request
func (o *GetHistoryEventsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Count != nil {

		// query param count
		var qrCount float64
		if o.Count != nil {
			qrCount = *o.Count
		}
		qCount := swag.FormatFloat64(qrCount)
		if qCount != "" {
			if err := r.SetQueryParam("count", qCount); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset float64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatFloat64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
