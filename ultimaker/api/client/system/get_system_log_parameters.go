package system

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetSystemLogParams creates a new GetSystemLogParams object
// with the default values initialized.
func NewGetSystemLogParams() *GetSystemLogParams {
	var ()
	return &GetSystemLogParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetSystemLogParamsWithTimeout creates a new GetSystemLogParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetSystemLogParamsWithTimeout(timeout time.Duration) *GetSystemLogParams {
	var ()
	return &GetSystemLogParams{

		timeout: timeout,
	}
}

// NewGetSystemLogParamsWithContext creates a new GetSystemLogParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetSystemLogParamsWithContext(ctx context.Context) *GetSystemLogParams {
	var ()
	return &GetSystemLogParams{

		Context: ctx,
	}
}

// NewGetSystemLogParamsWithHTTPClient creates a new GetSystemLogParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetSystemLogParamsWithHTTPClient(client *http.Client) *GetSystemLogParams {
	var ()
	return &GetSystemLogParams{
		HTTPClient: client,
	}
}

/*GetSystemLogParams contains all the parameters to send to the API endpoint
for the get system log operation typically these are written to a http.Request
*/
type GetSystemLogParams struct {

	/*Boot
	  Allow a boot parameter to get logs from previous boot sessions, default is 0 which is the current boot. -1 is the previous boot.

	*/
	Boot *float64
	/*Lines
	  Allow a lines parameter to specify the number of lines to get from the log. Defaults to 50

	*/
	Lines *float64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get system log params
func (o *GetSystemLogParams) WithTimeout(timeout time.Duration) *GetSystemLogParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get system log params
func (o *GetSystemLogParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get system log params
func (o *GetSystemLogParams) WithContext(ctx context.Context) *GetSystemLogParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get system log params
func (o *GetSystemLogParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get system log params
func (o *GetSystemLogParams) WithHTTPClient(client *http.Client) *GetSystemLogParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get system log params
func (o *GetSystemLogParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBoot adds the boot to the get system log params
func (o *GetSystemLogParams) WithBoot(boot *float64) *GetSystemLogParams {
	o.SetBoot(boot)
	return o
}

// SetBoot adds the boot to the get system log params
func (o *GetSystemLogParams) SetBoot(boot *float64) {
	o.Boot = boot
}

// WithLines adds the lines to the get system log params
func (o *GetSystemLogParams) WithLines(lines *float64) *GetSystemLogParams {
	o.SetLines(lines)
	return o
}

// SetLines adds the lines to the get system log params
func (o *GetSystemLogParams) SetLines(lines *float64) {
	o.Lines = lines
}

// WriteToRequest writes these params to a swagger request
func (o *GetSystemLogParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Boot != nil {

		// query param boot
		var qrBoot float64
		if o.Boot != nil {
			qrBoot = *o.Boot
		}
		qBoot := swag.FormatFloat64(qrBoot)
		if qBoot != "" {
			if err := r.SetQueryParam("boot", qBoot); err != nil {
				return err
			}
		}

	}

	if o.Lines != nil {

		// query param lines
		var qrLines float64
		if o.Lines != nil {
			qrLines = *o.Lines
		}
		qLines := swag.FormatFloat64(qrLines)
		if qLines != "" {
			if err := r.SetQueryParam("lines", qLines); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
