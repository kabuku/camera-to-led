package system

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// PutBeepReader is a Reader for the PutBeep structure.
type PutBeepReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutBeepReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewPutBeepNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPutBeepBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPutBeepNoContent creates a PutBeepNoContent with default headers values
func NewPutBeepNoContent() *PutBeepNoContent {
	return &PutBeepNoContent{}
}

/*PutBeepNoContent handles this case with default header values.

Printer beeped
*/
type PutBeepNoContent struct {
}

func (o *PutBeepNoContent) Error() string {
	return fmt.Sprintf("[PUT /beep][%d] putBeepNoContent ", 204)
}

func (o *PutBeepNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutBeepBadRequest creates a PutBeepBadRequest with default headers values
func NewPutBeepBadRequest() *PutBeepBadRequest {
	return &PutBeepBadRequest{}
}

/*PutBeepBadRequest handles this case with default header values.

Unable to beep due to missing parameters
*/
type PutBeepBadRequest struct {
}

func (o *PutBeepBadRequest) Error() string {
	return fmt.Sprintf("[PUT /beep][%d] putBeepBadRequest ", 400)
}

func (o *PutBeepBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
