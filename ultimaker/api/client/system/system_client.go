package system

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new system API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for system API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetSystem Get the entire system object
*/
func (a *Client) GetSystem(params *GetSystemParams) (*GetSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSystemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSystem",
		Method:             "GET",
		PathPattern:        "/system",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSystemReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSystemOK), nil

}

/*
GetSystemCountry Get the country of the system
*/
func (a *Client) GetSystemCountry(params *GetSystemCountryParams) (*GetSystemCountryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSystemCountryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSystemCountry",
		Method:             "GET",
		PathPattern:        "/system/country",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSystemCountryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSystemCountryOK), nil

}

/*
GetSystemGUID Every machine as a unique identifier stored inside the board. This allows for unique identification of this machine. This identifier is a UUID4.
*/
func (a *Client) GetSystemGUID(params *GetSystemGUIDParams) (*GetSystemGUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSystemGUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSystemGUID",
		Method:             "GET",
		PathPattern:        "/system/guid",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSystemGUIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSystemGUIDOK), nil

}

/*
GetSystemHardwareRevision The same machine could have different hardware revisions. When hardware is updated and software needs to know that hardware has changed, this revision number is changed. Currently only revision 0 is known.
*/
func (a *Client) GetSystemHardwareRevision(params *GetSystemHardwareRevisionParams) (*GetSystemHardwareRevisionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSystemHardwareRevisionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSystemHardwareRevision",
		Method:             "GET",
		PathPattern:        "/system/hardware/revision",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSystemHardwareRevisionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSystemHardwareRevisionOK), nil

}

/*
GetSystemHardwareTypeid Gets the machine type as number identifier. This identifier IDs a specific form of hardware
*/
func (a *Client) GetSystemHardwareTypeid(params *GetSystemHardwareTypeidParams) (*GetSystemHardwareTypeidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSystemHardwareTypeidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSystemHardwareTypeid",
		Method:             "GET",
		PathPattern:        "/system/hardware/typeid",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSystemHardwareTypeidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSystemHardwareTypeidOK), nil

}

/*
GetSystemLanguage Get the language of the system
*/
func (a *Client) GetSystemLanguage(params *GetSystemLanguageParams) (*GetSystemLanguageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSystemLanguageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSystemLanguage",
		Method:             "GET",
		PathPattern:        "/system/language",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSystemLanguageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSystemLanguageOK), nil

}

/*
GetSystemLog Get the logs of the system
*/
func (a *Client) GetSystemLog(params *GetSystemLogParams) (*GetSystemLogOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSystemLogParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSystemLog",
		Method:             "GET",
		PathPattern:        "/system/log",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSystemLogReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSystemLogOK), nil

}

/*
GetSystemName Get the name of the system
*/
func (a *Client) GetSystemName(params *GetSystemNameParams) (*GetSystemNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSystemNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSystemName",
		Method:             "GET",
		PathPattern:        "/system/name",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSystemNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSystemNameOK), nil

}

/*
GetSystemType Get the type of machine that we are talking with. Always returns "3D printer"
*/
func (a *Client) GetSystemType(params *GetSystemTypeParams) (*GetSystemTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSystemTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSystemType",
		Method:             "GET",
		PathPattern:        "/system/type",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSystemTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSystemTypeOK), nil

}

/*
GetSystemVariant Gets the machines variant. Currently this can return "Ultimaker 3" or "Ultimaker 3 extended".
*/
func (a *Client) GetSystemVariant(params *GetSystemVariantParams) (*GetSystemVariantOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSystemVariantParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSystemVariant",
		Method:             "GET",
		PathPattern:        "/system/variant",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSystemVariantReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSystemVariantOK), nil

}

/*
PutBeep Makes the printer beep
*/
func (a *Client) PutBeep(params *PutBeepParams) (*PutBeepNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutBeepParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutBeep",
		Method:             "PUT",
		PathPattern:        "/beep",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutBeepReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutBeepNoContent), nil

}

/*
PutSystemCountry put system country API
*/
func (a *Client) PutSystemCountry(params *PutSystemCountryParams) (*PutSystemCountryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutSystemCountryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutSystemCountry",
		Method:             "PUT",
		PathPattern:        "/system/country",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutSystemCountryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutSystemCountryNoContent), nil

}

/*
PutSystemName put system name API
*/
func (a *Client) PutSystemName(params *PutSystemNameParams) (*PutSystemNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutSystemNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutSystemName",
		Method:             "PUT",
		PathPattern:        "/system/name",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutSystemNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutSystemNameNoContent), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
