package network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new network API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for network API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeletePrinterNetworkWifiNetworksSsid delete printer network wifi networks ssid API
*/
func (a *Client) DeletePrinterNetworkWifiNetworksSsid(params *DeletePrinterNetworkWifiNetworksSsidParams) (*DeletePrinterNetworkWifiNetworksSsidNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePrinterNetworkWifiNetworksSsidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeletePrinterNetworkWifiNetworksSsid",
		Method:             "DELETE",
		PathPattern:        "/printer/network/wifi_networks/{ssid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeletePrinterNetworkWifiNetworksSsidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeletePrinterNetworkWifiNetworksSsidNoContent), nil

}

/*
GetPrinterNetwork Returns connection type of network
*/
func (a *Client) GetPrinterNetwork(params *GetPrinterNetworkParams) (*GetPrinterNetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrinterNetworkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrinterNetwork",
		Method:             "GET",
		PathPattern:        "/printer/network",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrinterNetworkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrinterNetworkOK), nil

}

/*
GetPrinterNetworkSSID Returns the SSID of the network (if any)
*/
func (a *Client) GetPrinterNetworkSSID(params *GetPrinterNetworkSSIDParams) (*GetPrinterNetworkSSIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrinterNetworkSSIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrinterNetworkSSID",
		Method:             "GET",
		PathPattern:        "/printer/network/SSID",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrinterNetworkSSIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrinterNetworkSSIDOK), nil

}

/*
GetPrinterNetworkWifiNetworks Returns connection type of network
*/
func (a *Client) GetPrinterNetworkWifiNetworks(params *GetPrinterNetworkWifiNetworksParams) (*GetPrinterNetworkWifiNetworksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrinterNetworkWifiNetworksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrinterNetworkWifiNetworks",
		Method:             "GET",
		PathPattern:        "/printer/network/wifi_networks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrinterNetworkWifiNetworksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrinterNetworkWifiNetworksOK), nil

}

/*
PutPrinterNetworkWifiNetworksSsid put printer network wifi networks ssid API
*/
func (a *Client) PutPrinterNetworkWifiNetworksSsid(params *PutPrinterNetworkWifiNetworksSsidParams) (*PutPrinterNetworkWifiNetworksSsidNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutPrinterNetworkWifiNetworksSsidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutPrinterNetworkWifiNetworksSsid",
		Method:             "PUT",
		PathPattern:        "/printer/network/wifi_networks/{ssid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutPrinterNetworkWifiNetworksSsidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutPrinterNetworkWifiNetworksSsidNoContent), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
