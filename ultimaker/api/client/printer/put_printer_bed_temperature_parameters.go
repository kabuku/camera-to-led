package printer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPutPrinterBedTemperatureParams creates a new PutPrinterBedTemperatureParams object
// with the default values initialized.
func NewPutPrinterBedTemperatureParams() *PutPrinterBedTemperatureParams {
	var ()
	return &PutPrinterBedTemperatureParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPutPrinterBedTemperatureParamsWithTimeout creates a new PutPrinterBedTemperatureParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPutPrinterBedTemperatureParamsWithTimeout(timeout time.Duration) *PutPrinterBedTemperatureParams {
	var ()
	return &PutPrinterBedTemperatureParams{

		timeout: timeout,
	}
}

// NewPutPrinterBedTemperatureParamsWithContext creates a new PutPrinterBedTemperatureParams object
// with the default values initialized, and the ability to set a context for a request
func NewPutPrinterBedTemperatureParamsWithContext(ctx context.Context) *PutPrinterBedTemperatureParams {
	var ()
	return &PutPrinterBedTemperatureParams{

		Context: ctx,
	}
}

// NewPutPrinterBedTemperatureParamsWithHTTPClient creates a new PutPrinterBedTemperatureParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPutPrinterBedTemperatureParamsWithHTTPClient(client *http.Client) *PutPrinterBedTemperatureParams {
	var ()
	return &PutPrinterBedTemperatureParams{
		HTTPClient: client,
	}
}

/*PutPrinterBedTemperatureParams contains all the parameters to send to the API endpoint
for the put printer bed temperature operation typically these are written to a http.Request
*/
type PutPrinterBedTemperatureParams struct {

	/*Temperature
	  Target temperature of bed

	*/
	Temperature float64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the put printer bed temperature params
func (o *PutPrinterBedTemperatureParams) WithTimeout(timeout time.Duration) *PutPrinterBedTemperatureParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put printer bed temperature params
func (o *PutPrinterBedTemperatureParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the put printer bed temperature params
func (o *PutPrinterBedTemperatureParams) WithContext(ctx context.Context) *PutPrinterBedTemperatureParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put printer bed temperature params
func (o *PutPrinterBedTemperatureParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the put printer bed temperature params
func (o *PutPrinterBedTemperatureParams) WithHTTPClient(client *http.Client) *PutPrinterBedTemperatureParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the put printer bed temperature params
func (o *PutPrinterBedTemperatureParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithTemperature adds the temperature to the put printer bed temperature params
func (o *PutPrinterBedTemperatureParams) WithTemperature(temperature float64) *PutPrinterBedTemperatureParams {
	o.SetTemperature(temperature)
	return o
}

// SetTemperature adds the temperature to the put printer bed temperature params
func (o *PutPrinterBedTemperatureParams) SetTemperature(temperature float64) {
	o.Temperature = temperature
}

// WriteToRequest writes these params to a swagger request
func (o *PutPrinterBedTemperatureParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// form param temperature
	frTemperature := o.Temperature
	fTemperature := swag.FormatFloat64(frTemperature)
	if fTemperature != "" {
		if err := r.SetFormParam("temperature", fTemperature); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
