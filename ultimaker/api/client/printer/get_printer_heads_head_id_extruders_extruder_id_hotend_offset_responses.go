package printer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/kabuku/camera-to-led/ultimaker/api/models"
)

// GetPrinterHeadsHeadIDExtrudersExtruderIDHotendOffsetReader is a Reader for the GetPrinterHeadsHeadIDExtrudersExtruderIDHotendOffset structure.
type GetPrinterHeadsHeadIDExtrudersExtruderIDHotendOffsetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPrinterHeadsHeadIDExtrudersExtruderIDHotendOffsetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetPrinterHeadsHeadIDExtrudersExtruderIDHotendOffsetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetPrinterHeadsHeadIDExtrudersExtruderIDHotendOffsetOK creates a GetPrinterHeadsHeadIDExtrudersExtruderIDHotendOffsetOK with default headers values
func NewGetPrinterHeadsHeadIDExtrudersExtruderIDHotendOffsetOK() *GetPrinterHeadsHeadIDExtrudersExtruderIDHotendOffsetOK {
	return &GetPrinterHeadsHeadIDExtrudersExtruderIDHotendOffsetOK{}
}

/*GetPrinterHeadsHeadIDExtrudersExtruderIDHotendOffsetOK handles this case with default header values.

GetPrinterHeadsHeadIDExtrudersExtruderIDHotendOffsetOK get printer heads head Id extruders extruder Id hotend offset o k
*/
type GetPrinterHeadsHeadIDExtrudersExtruderIDHotendOffsetOK struct {
	Payload *models.HotendOffset
}

func (o *GetPrinterHeadsHeadIDExtrudersExtruderIDHotendOffsetOK) Error() string {
	return fmt.Sprintf("[GET /printer/heads/{head_id}/extruders/{extruder_id}/hotend/offset][%d] getPrinterHeadsHeadIdExtrudersExtruderIdHotendOffsetOK  %+v", 200, o.Payload)
}

func (o *GetPrinterHeadsHeadIDExtrudersExtruderIDHotendOffsetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HotendOffset)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
