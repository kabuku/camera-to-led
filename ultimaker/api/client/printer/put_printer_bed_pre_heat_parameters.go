package printer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPutPrinterBedPreHeatParams creates a new PutPrinterBedPreHeatParams object
// with the default values initialized.
func NewPutPrinterBedPreHeatParams() *PutPrinterBedPreHeatParams {
	var (
		timeoutDefault = float64(300)
	)
	return &PutPrinterBedPreHeatParams{
		Timeout: &timeoutDefault,

		requestTimeout: cr.DefaultTimeout,
	}
}

// NewPutPrinterBedPreHeatParamsWithTimeout creates a new PutPrinterBedPreHeatParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPutPrinterBedPreHeatParamsWithTimeout(timeout time.Duration) *PutPrinterBedPreHeatParams {
	var (
		timeoutDefault = float64(300)
	)
	return &PutPrinterBedPreHeatParams{
		Timeout: &timeoutDefault,

		requestTimeout: timeout,
	}
}

// NewPutPrinterBedPreHeatParamsWithContext creates a new PutPrinterBedPreHeatParams object
// with the default values initialized, and the ability to set a context for a request
func NewPutPrinterBedPreHeatParamsWithContext(ctx context.Context) *PutPrinterBedPreHeatParams {
	var (
		timeoutDefault = float64(300)
	)
	return &PutPrinterBedPreHeatParams{
		Timeout: &timeoutDefault,

		Context: ctx,
	}
}

// NewPutPrinterBedPreHeatParamsWithHTTPClient creates a new PutPrinterBedPreHeatParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPutPrinterBedPreHeatParamsWithHTTPClient(client *http.Client) *PutPrinterBedPreHeatParams {
	var (
		timeoutDefault = float64(300)
	)
	return &PutPrinterBedPreHeatParams{
		Timeout:    &timeoutDefault,
		HTTPClient: client,
	}
}

/*PutPrinterBedPreHeatParams contains all the parameters to send to the API endpoint
for the put printer bed pre heat operation typically these are written to a http.Request
*/
type PutPrinterBedPreHeatParams struct {

	/*Temperature
	  Target temperature of bed in degrees Celsius

	*/
	Temperature float64
	/*Timeout
	  Timeout for preheating in seconds

	*/
	Timeout *float64

	requestTimeout time.Duration
	Context        context.Context
	HTTPClient     *http.Client
}

// WithRequestTimeout adds the timeout to the put printer bed pre heat params
func (o *PutPrinterBedPreHeatParams) WithRequestTimeout(timeout time.Duration) *PutPrinterBedPreHeatParams {
	o.SetRequestTimeout(timeout)
	return o
}

// SetRequestTimeout adds the timeout to the put printer bed pre heat params
func (o *PutPrinterBedPreHeatParams) SetRequestTimeout(timeout time.Duration) {
	o.requestTimeout = timeout
}

// WithContext adds the context to the put printer bed pre heat params
func (o *PutPrinterBedPreHeatParams) WithContext(ctx context.Context) *PutPrinterBedPreHeatParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put printer bed pre heat params
func (o *PutPrinterBedPreHeatParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the put printer bed pre heat params
func (o *PutPrinterBedPreHeatParams) WithHTTPClient(client *http.Client) *PutPrinterBedPreHeatParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the put printer bed pre heat params
func (o *PutPrinterBedPreHeatParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithTemperature adds the temperature to the put printer bed pre heat params
func (o *PutPrinterBedPreHeatParams) WithTemperature(temperature float64) *PutPrinterBedPreHeatParams {
	o.SetTemperature(temperature)
	return o
}

// SetTemperature adds the temperature to the put printer bed pre heat params
func (o *PutPrinterBedPreHeatParams) SetTemperature(temperature float64) {
	o.Temperature = temperature
}

// WithTimeout adds the timeout to the put printer bed pre heat params
func (o *PutPrinterBedPreHeatParams) WithTimeout(timeout *float64) *PutPrinterBedPreHeatParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put printer bed pre heat params
func (o *PutPrinterBedPreHeatParams) SetTimeout(timeout *float64) {
	o.Timeout = timeout
}

// WriteToRequest writes these params to a swagger request
func (o *PutPrinterBedPreHeatParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.requestTimeout); err != nil {
		return err
	}
	var res []error

	// form param temperature
	frTemperature := o.Temperature
	fTemperature := swag.FormatFloat64(frTemperature)
	if fTemperature != "" {
		if err := r.SetFormParam("temperature", fTemperature); err != nil {
			return err
		}
	}

	if o.Timeout != nil {

		// form param timeout
		var frTimeout float64
		if o.Timeout != nil {
			frTimeout = *o.Timeout
		}
		fTimeout := swag.FormatFloat64(frTimeout)
		if fTimeout != "" {
			if err := r.SetFormParam("timeout", fTimeout); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
