package printer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// GetPrinterBedPreHeatReader is a Reader for the GetPrinterBedPreHeat structure.
type GetPrinterBedPreHeatReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPrinterBedPreHeatReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetPrinterBedPreHeatOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetPrinterBedPreHeatOK creates a GetPrinterBedPreHeatOK with default headers values
func NewGetPrinterBedPreHeatOK() *GetPrinterBedPreHeatOK {
	return &GetPrinterBedPreHeatOK{}
}

/*GetPrinterBedPreHeatOK handles this case with default header values.

Status of pre-heating the heated bed.
*/
type GetPrinterBedPreHeatOK struct {
	Payload GetPrinterBedPreHeatOKBody
}

func (o *GetPrinterBedPreHeatOK) Error() string {
	return fmt.Sprintf("[GET /printer/bed/pre_heat][%d] getPrinterBedPreHeatOK  %+v", 200, o.Payload)
}

func (o *GetPrinterBedPreHeatOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetPrinterBedPreHeatOKBody get printer bed pre heat o k body
swagger:model GetPrinterBedPreHeatOKBody
*/
type GetPrinterBedPreHeatOKBody struct {

	// active
	// Required: true
	Active *bool `json:"active"`

	// Remaining pre-heat time in seconds. Only available when 'active' is True
	// Required: true
	Remaining *float64 `json:"remaining"`
}

// Validate validates this get printer bed pre heat o k body
func (o *GetPrinterBedPreHeatOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateActive(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateRemaining(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPrinterBedPreHeatOKBody) validateActive(formats strfmt.Registry) error {

	if err := validate.Required("getPrinterBedPreHeatOK"+"."+"active", "body", o.Active); err != nil {
		return err
	}

	return nil
}

func (o *GetPrinterBedPreHeatOKBody) validateRemaining(formats strfmt.Registry) error {

	if err := validate.Required("getPrinterBedPreHeatOK"+"."+"remaining", "body", o.Remaining); err != nil {
		return err
	}

	return nil
}
