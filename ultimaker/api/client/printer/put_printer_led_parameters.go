package printer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/kabuku/camera-to-led/ultimaker/api/models"
)

// NewPutPrinterLedParams creates a new PutPrinterLedParams object
// with the default values initialized.
func NewPutPrinterLedParams() *PutPrinterLedParams {
	var ()
	return &PutPrinterLedParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPutPrinterLedParamsWithTimeout creates a new PutPrinterLedParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPutPrinterLedParamsWithTimeout(timeout time.Duration) *PutPrinterLedParams {
	var ()
	return &PutPrinterLedParams{

		timeout: timeout,
	}
}

// NewPutPrinterLedParamsWithContext creates a new PutPrinterLedParams object
// with the default values initialized, and the ability to set a context for a request
func NewPutPrinterLedParamsWithContext(ctx context.Context) *PutPrinterLedParams {
	var ()
	return &PutPrinterLedParams{

		Context: ctx,
	}
}

// NewPutPrinterLedParamsWithHTTPClient creates a new PutPrinterLedParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPutPrinterLedParamsWithHTTPClient(client *http.Client) *PutPrinterLedParams {
	var ()
	return &PutPrinterLedParams{
		HTTPClient: client,
	}
}

/*PutPrinterLedParams contains all the parameters to send to the API endpoint
for the put printer led operation typically these are written to a http.Request
*/
type PutPrinterLedParams struct {

	/*Hue
	  Target hue of case lighting

	*/
	Hue *models.Led

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the put printer led params
func (o *PutPrinterLedParams) WithTimeout(timeout time.Duration) *PutPrinterLedParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put printer led params
func (o *PutPrinterLedParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the put printer led params
func (o *PutPrinterLedParams) WithContext(ctx context.Context) *PutPrinterLedParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put printer led params
func (o *PutPrinterLedParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the put printer led params
func (o *PutPrinterLedParams) WithHTTPClient(client *http.Client) *PutPrinterLedParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the put printer led params
func (o *PutPrinterLedParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithHue adds the hue to the put printer led params
func (o *PutPrinterLedParams) WithHue(hue *models.Led) *PutPrinterLedParams {
	o.SetHue(hue)
	return o
}

// SetHue adds the hue to the put printer led params
func (o *PutPrinterLedParams) SetHue(hue *models.Led) {
	o.Hue = hue
}

// WriteToRequest writes these params to a swagger request
func (o *PutPrinterLedParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Hue == nil {
		o.Hue = new(models.Led)
	}

	if err := r.SetBodyParam(o.Hue); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
