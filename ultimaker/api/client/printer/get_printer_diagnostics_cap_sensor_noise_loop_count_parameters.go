package printer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetPrinterDiagnosticsCapSensorNoiseLoopCountParams creates a new GetPrinterDiagnosticsCapSensorNoiseLoopCountParams object
// with the default values initialized.
func NewGetPrinterDiagnosticsCapSensorNoiseLoopCountParams() *GetPrinterDiagnosticsCapSensorNoiseLoopCountParams {
	var ()
	return &GetPrinterDiagnosticsCapSensorNoiseLoopCountParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetPrinterDiagnosticsCapSensorNoiseLoopCountParamsWithTimeout creates a new GetPrinterDiagnosticsCapSensorNoiseLoopCountParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetPrinterDiagnosticsCapSensorNoiseLoopCountParamsWithTimeout(timeout time.Duration) *GetPrinterDiagnosticsCapSensorNoiseLoopCountParams {
	var ()
	return &GetPrinterDiagnosticsCapSensorNoiseLoopCountParams{

		timeout: timeout,
	}
}

// NewGetPrinterDiagnosticsCapSensorNoiseLoopCountParamsWithContext creates a new GetPrinterDiagnosticsCapSensorNoiseLoopCountParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetPrinterDiagnosticsCapSensorNoiseLoopCountParamsWithContext(ctx context.Context) *GetPrinterDiagnosticsCapSensorNoiseLoopCountParams {
	var ()
	return &GetPrinterDiagnosticsCapSensorNoiseLoopCountParams{

		Context: ctx,
	}
}

// NewGetPrinterDiagnosticsCapSensorNoiseLoopCountParamsWithHTTPClient creates a new GetPrinterDiagnosticsCapSensorNoiseLoopCountParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetPrinterDiagnosticsCapSensorNoiseLoopCountParamsWithHTTPClient(client *http.Client) *GetPrinterDiagnosticsCapSensorNoiseLoopCountParams {
	var ()
	return &GetPrinterDiagnosticsCapSensorNoiseLoopCountParams{
		HTTPClient: client,
	}
}

/*GetPrinterDiagnosticsCapSensorNoiseLoopCountParams contains all the parameters to send to the API endpoint
for the get printer diagnostics cap sensor noise loop count operation typically these are written to a http.Request
*/
type GetPrinterDiagnosticsCapSensorNoiseLoopCountParams struct {

	/*LoopCount
	  The number of times to get sample data

	*/
	LoopCount int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get printer diagnostics cap sensor noise loop count params
func (o *GetPrinterDiagnosticsCapSensorNoiseLoopCountParams) WithTimeout(timeout time.Duration) *GetPrinterDiagnosticsCapSensorNoiseLoopCountParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get printer diagnostics cap sensor noise loop count params
func (o *GetPrinterDiagnosticsCapSensorNoiseLoopCountParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get printer diagnostics cap sensor noise loop count params
func (o *GetPrinterDiagnosticsCapSensorNoiseLoopCountParams) WithContext(ctx context.Context) *GetPrinterDiagnosticsCapSensorNoiseLoopCountParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get printer diagnostics cap sensor noise loop count params
func (o *GetPrinterDiagnosticsCapSensorNoiseLoopCountParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get printer diagnostics cap sensor noise loop count params
func (o *GetPrinterDiagnosticsCapSensorNoiseLoopCountParams) WithHTTPClient(client *http.Client) *GetPrinterDiagnosticsCapSensorNoiseLoopCountParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get printer diagnostics cap sensor noise loop count params
func (o *GetPrinterDiagnosticsCapSensorNoiseLoopCountParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLoopCount adds the loopCount to the get printer diagnostics cap sensor noise loop count params
func (o *GetPrinterDiagnosticsCapSensorNoiseLoopCountParams) WithLoopCount(loopCount int32) *GetPrinterDiagnosticsCapSensorNoiseLoopCountParams {
	o.SetLoopCount(loopCount)
	return o
}

// SetLoopCount adds the loopCount to the get printer diagnostics cap sensor noise loop count params
func (o *GetPrinterDiagnosticsCapSensorNoiseLoopCountParams) SetLoopCount(loopCount int32) {
	o.LoopCount = loopCount
}

// WriteToRequest writes these params to a swagger request
func (o *GetPrinterDiagnosticsCapSensorNoiseLoopCountParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param loop_count
	if err := r.SetPathParam("loop_count", swag.FormatInt32(o.LoopCount)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
