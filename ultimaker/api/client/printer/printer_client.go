package printer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new printer API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for printer API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetPrinter Returns printer object
*/
func (a *Client) GetPrinter(params *GetPrinterParams) (*GetPrinterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrinterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrinter",
		Method:             "GET",
		PathPattern:        "/printer",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrinterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrinterOK), nil

}

/*
GetPrinterBed Returns bed object
*/
func (a *Client) GetPrinterBed(params *GetPrinterBedParams) (*GetPrinterBedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrinterBedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrinterBed",
		Method:             "GET",
		PathPattern:        "/printer/bed",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrinterBedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrinterBedOK), nil

}

/*
GetPrinterBedPreHeat Returns status of pre-heating the heated bed.
*/
func (a *Client) GetPrinterBedPreHeat(params *GetPrinterBedPreHeatParams) (*GetPrinterBedPreHeatOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrinterBedPreHeatParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrinterBedPreHeat",
		Method:             "GET",
		PathPattern:        "/printer/bed/pre_heat",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrinterBedPreHeatReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrinterBedPreHeatOK), nil

}

/*
GetPrinterBedTemperature Returns temperature of bed
*/
func (a *Client) GetPrinterBedTemperature(params *GetPrinterBedTemperatureParams) (*GetPrinterBedTemperatureOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrinterBedTemperatureParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrinterBedTemperature",
		Method:             "GET",
		PathPattern:        "/printer/bed/temperature",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrinterBedTemperatureReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrinterBedTemperatureOK), nil

}

/*
GetPrinterDiagnosticsCapSensorNoise Calculates noise variances on the cap sensor by executing taking 100 values, each  loop measuring 50 samples
*/
func (a *Client) GetPrinterDiagnosticsCapSensorNoise(params *GetPrinterDiagnosticsCapSensorNoiseParams) (*GetPrinterDiagnosticsCapSensorNoiseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrinterDiagnosticsCapSensorNoiseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrinterDiagnosticsCapSensorNoise",
		Method:             "GET",
		PathPattern:        "/printer/diagnostics/cap_sensor_noise",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrinterDiagnosticsCapSensorNoiseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrinterDiagnosticsCapSensorNoiseOK), nil

}

/*
GetPrinterDiagnosticsCapSensorNoiseLoopCount Calculates noise variances on the cap sensor by executing the specified loop_count iterations, each iteration measuring 50 samples
*/
func (a *Client) GetPrinterDiagnosticsCapSensorNoiseLoopCount(params *GetPrinterDiagnosticsCapSensorNoiseLoopCountParams) (*GetPrinterDiagnosticsCapSensorNoiseLoopCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrinterDiagnosticsCapSensorNoiseLoopCountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrinterDiagnosticsCapSensorNoiseLoopCount",
		Method:             "GET",
		PathPattern:        "/printer/diagnostics/cap_sensor_noise/{loop_count}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrinterDiagnosticsCapSensorNoiseLoopCountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrinterDiagnosticsCapSensorNoiseLoopCountOK), nil

}

/*
GetPrinterDiagnosticsCapSensorNoiseLoopCountSampleCount Calculates noise variances on the cap sensor by executing the specified loop_count iterations, each iteration measuring sample_count samples
*/
func (a *Client) GetPrinterDiagnosticsCapSensorNoiseLoopCountSampleCount(params *GetPrinterDiagnosticsCapSensorNoiseLoopCountSampleCountParams) (*GetPrinterDiagnosticsCapSensorNoiseLoopCountSampleCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrinterDiagnosticsCapSensorNoiseLoopCountSampleCountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrinterDiagnosticsCapSensorNoiseLoopCountSampleCount",
		Method:             "GET",
		PathPattern:        "/printer/diagnostics/cap_sensor_noise/{loop_count}/{sample_count}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrinterDiagnosticsCapSensorNoiseLoopCountSampleCountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrinterDiagnosticsCapSensorNoiseLoopCountSampleCountOK), nil

}

/*
GetPrinterDiagnosticsTemperatureFlowSampleCount Gets historical temperature&flow data
*/
func (a *Client) GetPrinterDiagnosticsTemperatureFlowSampleCount(params *GetPrinterDiagnosticsTemperatureFlowSampleCountParams) (*GetPrinterDiagnosticsTemperatureFlowSampleCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrinterDiagnosticsTemperatureFlowSampleCountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrinterDiagnosticsTemperatureFlowSampleCount",
		Method:             "GET",
		PathPattern:        "/printer/diagnostics/temperature_flow/{sample_count}",
		ProducesMediaTypes: []string{"application/json", "text/csv"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrinterDiagnosticsTemperatureFlowSampleCountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrinterDiagnosticsTemperatureFlowSampleCountOK), nil

}

/*
GetPrinterHeads Returns all heads of the printer
*/
func (a *Client) GetPrinterHeads(params *GetPrinterHeadsParams) (*GetPrinterHeadsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrinterHeadsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrinterHeads",
		Method:             "GET",
		PathPattern:        "/printer/heads",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrinterHeadsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrinterHeadsOK), nil

}

/*
GetPrinterHeadsHeadID Returns head by ID
*/
func (a *Client) GetPrinterHeadsHeadID(params *GetPrinterHeadsHeadIDParams) (*GetPrinterHeadsHeadIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrinterHeadsHeadIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrinterHeadsHeadID",
		Method:             "GET",
		PathPattern:        "/printer/heads/{head_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrinterHeadsHeadIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrinterHeadsHeadIDOK), nil

}

/*
GetPrinterHeadsHeadIDAcceleration Returns the default acceleration of head by ID.
*/
func (a *Client) GetPrinterHeadsHeadIDAcceleration(params *GetPrinterHeadsHeadIDAccelerationParams) (*GetPrinterHeadsHeadIDAccelerationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrinterHeadsHeadIDAccelerationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrinterHeadsHeadIDAcceleration",
		Method:             "GET",
		PathPattern:        "/printer/heads/{head_id}/acceleration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrinterHeadsHeadIDAccelerationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrinterHeadsHeadIDAccelerationOK), nil

}

/*
GetPrinterHeadsHeadIDExtruders Returns all extruders of a head
*/
func (a *Client) GetPrinterHeadsHeadIDExtruders(params *GetPrinterHeadsHeadIDExtrudersParams) (*GetPrinterHeadsHeadIDExtrudersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrinterHeadsHeadIDExtrudersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrinterHeadsHeadIDExtruders",
		Method:             "GET",
		PathPattern:        "/printer/heads/{head_id}/extruders/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrinterHeadsHeadIDExtrudersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrinterHeadsHeadIDExtrudersOK), nil

}

/*
GetPrinterHeadsHeadIDExtrudersExtruderID Returns extruder by ID
*/
func (a *Client) GetPrinterHeadsHeadIDExtrudersExtruderID(params *GetPrinterHeadsHeadIDExtrudersExtruderIDParams) (*GetPrinterHeadsHeadIDExtrudersExtruderIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrinterHeadsHeadIDExtrudersExtruderIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrinterHeadsHeadIDExtrudersExtruderID",
		Method:             "GET",
		PathPattern:        "/printer/heads/{head_id}/extruders/{extruder_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrinterHeadsHeadIDExtrudersExtruderIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrinterHeadsHeadIDExtrudersExtruderIDOK), nil

}

/*
GetPrinterHeadsHeadIDExtrudersExtruderIDActiveMaterial Get the active material of the extruder
*/
func (a *Client) GetPrinterHeadsHeadIDExtrudersExtruderIDActiveMaterial(params *GetPrinterHeadsHeadIDExtrudersExtruderIDActiveMaterialParams) (*GetPrinterHeadsHeadIDExtrudersExtruderIDActiveMaterialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrinterHeadsHeadIDExtrudersExtruderIDActiveMaterialParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrinterHeadsHeadIDExtrudersExtruderIDActiveMaterial",
		Method:             "GET",
		PathPattern:        "/printer/heads/{head_id}/extruders/{extruder_id}/active_material",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrinterHeadsHeadIDExtrudersExtruderIDActiveMaterialReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrinterHeadsHeadIDExtrudersExtruderIDActiveMaterialOK), nil

}

/*
GetPrinterHeadsHeadIDExtrudersExtruderIDActiveMaterialGUID Returns the GUID of the active material
*/
func (a *Client) GetPrinterHeadsHeadIDExtrudersExtruderIDActiveMaterialGUID(params *GetPrinterHeadsHeadIDExtrudersExtruderIDActiveMaterialGUIDParams) (*GetPrinterHeadsHeadIDExtrudersExtruderIDActiveMaterialGUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrinterHeadsHeadIDExtrudersExtruderIDActiveMaterialGUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrinterHeadsHeadIDExtrudersExtruderIDActiveMaterialGUID",
		Method:             "GET",
		PathPattern:        "/printer/heads/{head_id}/extruders/{extruder_id}/active_material/guid",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrinterHeadsHeadIDExtrudersExtruderIDActiveMaterialGUIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrinterHeadsHeadIDExtrudersExtruderIDActiveMaterialGUIDOK), nil

}

/*
GetPrinterHeadsHeadIDExtrudersExtruderIDActiveMaterialLengthRemaining length of material remaining on spool in mm. Or -1 if no value is known.
*/
func (a *Client) GetPrinterHeadsHeadIDExtrudersExtruderIDActiveMaterialLengthRemaining(params *GetPrinterHeadsHeadIDExtrudersExtruderIDActiveMaterialLengthRemainingParams) (*GetPrinterHeadsHeadIDExtrudersExtruderIDActiveMaterialLengthRemainingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrinterHeadsHeadIDExtrudersExtruderIDActiveMaterialLengthRemainingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrinterHeadsHeadIDExtrudersExtruderIDActiveMaterialLengthRemaining",
		Method:             "GET",
		PathPattern:        "/printer/heads/{head_id}/extruders/{extruder_id}/active_material/length_remaining",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrinterHeadsHeadIDExtrudersExtruderIDActiveMaterialLengthRemainingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrinterHeadsHeadIDExtrudersExtruderIDActiveMaterialLengthRemainingOK), nil

}

/*
GetPrinterHeadsHeadIDExtrudersExtruderIDFeeder Returns feeder of selected extruder
*/
func (a *Client) GetPrinterHeadsHeadIDExtrudersExtruderIDFeeder(params *GetPrinterHeadsHeadIDExtrudersExtruderIDFeederParams) (*GetPrinterHeadsHeadIDExtrudersExtruderIDFeederOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrinterHeadsHeadIDExtrudersExtruderIDFeederParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrinterHeadsHeadIDExtrudersExtruderIDFeeder",
		Method:             "GET",
		PathPattern:        "/printer/heads/{head_id}/extruders/{extruder_id}/feeder",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrinterHeadsHeadIDExtrudersExtruderIDFeederReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrinterHeadsHeadIDExtrudersExtruderIDFeederOK), nil

}

/*
GetPrinterHeadsHeadIDExtrudersExtruderIDFeederAcceleration Returns acceleration of feeder.
*/
func (a *Client) GetPrinterHeadsHeadIDExtrudersExtruderIDFeederAcceleration(params *GetPrinterHeadsHeadIDExtrudersExtruderIDFeederAccelerationParams) (*GetPrinterHeadsHeadIDExtrudersExtruderIDFeederAccelerationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrinterHeadsHeadIDExtrudersExtruderIDFeederAccelerationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrinterHeadsHeadIDExtrudersExtruderIDFeederAcceleration",
		Method:             "GET",
		PathPattern:        "/printer/heads/{head_id}/extruders/{extruder_id}/feeder/acceleration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrinterHeadsHeadIDExtrudersExtruderIDFeederAccelerationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrinterHeadsHeadIDExtrudersExtruderIDFeederAccelerationOK), nil

}

/*
GetPrinterHeadsHeadIDExtrudersExtruderIDFeederJerk Returns jerk of feeder
*/
func (a *Client) GetPrinterHeadsHeadIDExtrudersExtruderIDFeederJerk(params *GetPrinterHeadsHeadIDExtrudersExtruderIDFeederJerkParams) (*GetPrinterHeadsHeadIDExtrudersExtruderIDFeederJerkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrinterHeadsHeadIDExtrudersExtruderIDFeederJerkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrinterHeadsHeadIDExtrudersExtruderIDFeederJerk",
		Method:             "GET",
		PathPattern:        "/printer/heads/{head_id}/extruders/{extruder_id}/feeder/jerk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrinterHeadsHeadIDExtrudersExtruderIDFeederJerkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrinterHeadsHeadIDExtrudersExtruderIDFeederJerkOK), nil

}

/*
GetPrinterHeadsHeadIDExtrudersExtruderIDFeederMaxSpeed Returns max_speed of feeder.
*/
func (a *Client) GetPrinterHeadsHeadIDExtrudersExtruderIDFeederMaxSpeed(params *GetPrinterHeadsHeadIDExtrudersExtruderIDFeederMaxSpeedParams) (*GetPrinterHeadsHeadIDExtrudersExtruderIDFeederMaxSpeedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrinterHeadsHeadIDExtrudersExtruderIDFeederMaxSpeedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrinterHeadsHeadIDExtrudersExtruderIDFeederMaxSpeed",
		Method:             "GET",
		PathPattern:        "/printer/heads/{head_id}/extruders/{extruder_id}/feeder/max_speed",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrinterHeadsHeadIDExtrudersExtruderIDFeederMaxSpeedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrinterHeadsHeadIDExtrudersExtruderIDFeederMaxSpeedOK), nil

}

/*
GetPrinterHeadsHeadIDExtrudersExtruderIDHotend Returns hotend of extruder
*/
func (a *Client) GetPrinterHeadsHeadIDExtrudersExtruderIDHotend(params *GetPrinterHeadsHeadIDExtrudersExtruderIDHotendParams) (*GetPrinterHeadsHeadIDExtrudersExtruderIDHotendOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrinterHeadsHeadIDExtrudersExtruderIDHotendParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrinterHeadsHeadIDExtrudersExtruderIDHotend",
		Method:             "GET",
		PathPattern:        "/printer/heads/{head_id}/extruders/{extruder_id}/hotend",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrinterHeadsHeadIDExtrudersExtruderIDHotendReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrinterHeadsHeadIDExtrudersExtruderIDHotendOK), nil

}

/*
GetPrinterHeadsHeadIDExtrudersExtruderIDHotendOffset Returns offset of hotend with respect to head
*/
func (a *Client) GetPrinterHeadsHeadIDExtrudersExtruderIDHotendOffset(params *GetPrinterHeadsHeadIDExtrudersExtruderIDHotendOffsetParams) (*GetPrinterHeadsHeadIDExtrudersExtruderIDHotendOffsetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrinterHeadsHeadIDExtrudersExtruderIDHotendOffsetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrinterHeadsHeadIDExtrudersExtruderIDHotendOffset",
		Method:             "GET",
		PathPattern:        "/printer/heads/{head_id}/extruders/{extruder_id}/hotend/offset",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrinterHeadsHeadIDExtrudersExtruderIDHotendOffsetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrinterHeadsHeadIDExtrudersExtruderIDHotendOffsetOK), nil

}

/*
GetPrinterHeadsHeadIDExtrudersExtruderIDHotendTemperature Returns temperature of extruder
*/
func (a *Client) GetPrinterHeadsHeadIDExtrudersExtruderIDHotendTemperature(params *GetPrinterHeadsHeadIDExtrudersExtruderIDHotendTemperatureParams) (*GetPrinterHeadsHeadIDExtrudersExtruderIDHotendTemperatureOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrinterHeadsHeadIDExtrudersExtruderIDHotendTemperatureParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrinterHeadsHeadIDExtrudersExtruderIDHotendTemperature",
		Method:             "GET",
		PathPattern:        "/printer/heads/{head_id}/extruders/{extruder_id}/hotend/temperature",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrinterHeadsHeadIDExtrudersExtruderIDHotendTemperatureReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrinterHeadsHeadIDExtrudersExtruderIDHotendTemperatureOK), nil

}

/*
GetPrinterHeadsHeadIDJerk Returns jerk of head by ID
*/
func (a *Client) GetPrinterHeadsHeadIDJerk(params *GetPrinterHeadsHeadIDJerkParams) (*GetPrinterHeadsHeadIDJerkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrinterHeadsHeadIDJerkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrinterHeadsHeadIDJerk",
		Method:             "GET",
		PathPattern:        "/printer/heads/{head_id}/jerk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrinterHeadsHeadIDJerkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrinterHeadsHeadIDJerkOK), nil

}

/*
GetPrinterHeadsHeadIDMaxSpeed Returns max speed of head by ID
*/
func (a *Client) GetPrinterHeadsHeadIDMaxSpeed(params *GetPrinterHeadsHeadIDMaxSpeedParams) (*GetPrinterHeadsHeadIDMaxSpeedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrinterHeadsHeadIDMaxSpeedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrinterHeadsHeadIDMaxSpeed",
		Method:             "GET",
		PathPattern:        "/printer/heads/{head_id}/max_speed",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrinterHeadsHeadIDMaxSpeedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrinterHeadsHeadIDMaxSpeedOK), nil

}

/*
GetPrinterHeadsHeadIDPosition Returns position of head by ID
*/
func (a *Client) GetPrinterHeadsHeadIDPosition(params *GetPrinterHeadsHeadIDPositionParams) (*GetPrinterHeadsHeadIDPositionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrinterHeadsHeadIDPositionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrinterHeadsHeadIDPosition",
		Method:             "GET",
		PathPattern:        "/printer/heads/{head_id}/position",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrinterHeadsHeadIDPositionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrinterHeadsHeadIDPositionOK), nil

}

/*
GetPrinterLed Returns hue, saturation, and value (HSV) of the case lighting
*/
func (a *Client) GetPrinterLed(params *GetPrinterLedParams) (*GetPrinterLedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrinterLedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrinterLed",
		Method:             "GET",
		PathPattern:        "/printer/led",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrinterLedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrinterLedOK), nil

}

/*
GetPrinterStatus Get the status of the printer
*/
func (a *Client) GetPrinterStatus(params *GetPrinterStatusParams) (*GetPrinterStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrinterStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrinterStatus",
		Method:             "GET",
		PathPattern:        "/printer/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrinterStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrinterStatusOK), nil

}

/*
PostPrinterLedBlink post printer led blink API
*/
func (a *Client) PostPrinterLedBlink(params *PostPrinterLedBlinkParams) (*PostPrinterLedBlinkNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPrinterLedBlinkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPrinterLedBlink",
		Method:             "POST",
		PathPattern:        "/printer/led/blink",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostPrinterLedBlinkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPrinterLedBlinkNoContent), nil

}

/*
PutPrinterBedPreHeat put printer bed pre heat API
*/
func (a *Client) PutPrinterBedPreHeat(params *PutPrinterBedPreHeatParams) (*PutPrinterBedPreHeatNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutPrinterBedPreHeatParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutPrinterBedPreHeat",
		Method:             "PUT",
		PathPattern:        "/printer/bed/pre_heat",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutPrinterBedPreHeatReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutPrinterBedPreHeatNoContent), nil

}

/*
PutPrinterBedTemperature put printer bed temperature API
*/
func (a *Client) PutPrinterBedTemperature(params *PutPrinterBedTemperatureParams) (*PutPrinterBedTemperatureNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutPrinterBedTemperatureParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutPrinterBedTemperature",
		Method:             "PUT",
		PathPattern:        "/printer/bed/temperature",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutPrinterBedTemperatureReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutPrinterBedTemperatureNoContent), nil

}

/*
PutPrinterHeadsHeadIDAcceleration put printer heads head ID acceleration API
*/
func (a *Client) PutPrinterHeadsHeadIDAcceleration(params *PutPrinterHeadsHeadIDAccelerationParams) (*PutPrinterHeadsHeadIDAccelerationNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutPrinterHeadsHeadIDAccelerationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutPrinterHeadsHeadIDAcceleration",
		Method:             "PUT",
		PathPattern:        "/printer/heads/{head_id}/acceleration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutPrinterHeadsHeadIDAccelerationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutPrinterHeadsHeadIDAccelerationNoContent), nil

}

/*
PutPrinterHeadsHeadIDExtrudersExtruderIDFeederAcceleration put printer heads head ID extruders extruder ID feeder acceleration API
*/
func (a *Client) PutPrinterHeadsHeadIDExtrudersExtruderIDFeederAcceleration(params *PutPrinterHeadsHeadIDExtrudersExtruderIDFeederAccelerationParams) (*PutPrinterHeadsHeadIDExtrudersExtruderIDFeederAccelerationNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutPrinterHeadsHeadIDExtrudersExtruderIDFeederAccelerationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutPrinterHeadsHeadIDExtrudersExtruderIDFeederAcceleration",
		Method:             "PUT",
		PathPattern:        "/printer/heads/{head_id}/extruders/{extruder_id}/feeder/acceleration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutPrinterHeadsHeadIDExtrudersExtruderIDFeederAccelerationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutPrinterHeadsHeadIDExtrudersExtruderIDFeederAccelerationNoContent), nil

}

/*
PutPrinterHeadsHeadIDExtrudersExtruderIDFeederJerk put printer heads head ID extruders extruder ID feeder jerk API
*/
func (a *Client) PutPrinterHeadsHeadIDExtrudersExtruderIDFeederJerk(params *PutPrinterHeadsHeadIDExtrudersExtruderIDFeederJerkParams) (*PutPrinterHeadsHeadIDExtrudersExtruderIDFeederJerkNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutPrinterHeadsHeadIDExtrudersExtruderIDFeederJerkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutPrinterHeadsHeadIDExtrudersExtruderIDFeederJerk",
		Method:             "PUT",
		PathPattern:        "/printer/heads/{head_id}/extruders/{extruder_id}/feeder/jerk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutPrinterHeadsHeadIDExtrudersExtruderIDFeederJerkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutPrinterHeadsHeadIDExtrudersExtruderIDFeederJerkNoContent), nil

}

/*
PutPrinterHeadsHeadIDExtrudersExtruderIDFeederMaxSpeed put printer heads head ID extruders extruder ID feeder max speed API
*/
func (a *Client) PutPrinterHeadsHeadIDExtrudersExtruderIDFeederMaxSpeed(params *PutPrinterHeadsHeadIDExtrudersExtruderIDFeederMaxSpeedParams) (*PutPrinterHeadsHeadIDExtrudersExtruderIDFeederMaxSpeedNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutPrinterHeadsHeadIDExtrudersExtruderIDFeederMaxSpeedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutPrinterHeadsHeadIDExtrudersExtruderIDFeederMaxSpeed",
		Method:             "PUT",
		PathPattern:        "/printer/heads/{head_id}/extruders/{extruder_id}/feeder/max_speed",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutPrinterHeadsHeadIDExtrudersExtruderIDFeederMaxSpeedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutPrinterHeadsHeadIDExtrudersExtruderIDFeederMaxSpeedNoContent), nil

}

/*
PutPrinterHeadsHeadIDExtrudersExtruderIDHotendTemperature put printer heads head ID extruders extruder ID hotend temperature API
*/
func (a *Client) PutPrinterHeadsHeadIDExtrudersExtruderIDHotendTemperature(params *PutPrinterHeadsHeadIDExtrudersExtruderIDHotendTemperatureParams) (*PutPrinterHeadsHeadIDExtrudersExtruderIDHotendTemperatureNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutPrinterHeadsHeadIDExtrudersExtruderIDHotendTemperatureParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutPrinterHeadsHeadIDExtrudersExtruderIDHotendTemperature",
		Method:             "PUT",
		PathPattern:        "/printer/heads/{head_id}/extruders/{extruder_id}/hotend/temperature",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutPrinterHeadsHeadIDExtrudersExtruderIDHotendTemperatureReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutPrinterHeadsHeadIDExtrudersExtruderIDHotendTemperatureNoContent), nil

}

/*
PutPrinterHeadsHeadIDJerk put printer heads head ID jerk API
*/
func (a *Client) PutPrinterHeadsHeadIDJerk(params *PutPrinterHeadsHeadIDJerkParams) (*PutPrinterHeadsHeadIDJerkNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutPrinterHeadsHeadIDJerkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutPrinterHeadsHeadIDJerk",
		Method:             "PUT",
		PathPattern:        "/printer/heads/{head_id}/jerk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutPrinterHeadsHeadIDJerkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutPrinterHeadsHeadIDJerkNoContent), nil

}

/*
PutPrinterHeadsHeadIDMaxSpeed put printer heads head ID max speed API
*/
func (a *Client) PutPrinterHeadsHeadIDMaxSpeed(params *PutPrinterHeadsHeadIDMaxSpeedParams) (*PutPrinterHeadsHeadIDMaxSpeedNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutPrinterHeadsHeadIDMaxSpeedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutPrinterHeadsHeadIDMaxSpeed",
		Method:             "PUT",
		PathPattern:        "/printer/heads/{head_id}/max_speed",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutPrinterHeadsHeadIDMaxSpeedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutPrinterHeadsHeadIDMaxSpeedNoContent), nil

}

/*
PutPrinterHeadsHeadIDPosition put printer heads head ID position API
*/
func (a *Client) PutPrinterHeadsHeadIDPosition(params *PutPrinterHeadsHeadIDPositionParams) (*PutPrinterHeadsHeadIDPositionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutPrinterHeadsHeadIDPositionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutPrinterHeadsHeadIDPosition",
		Method:             "PUT",
		PathPattern:        "/printer/heads/{head_id}/position",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutPrinterHeadsHeadIDPositionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutPrinterHeadsHeadIDPositionNoContent), nil

}

/*
PutPrinterLed put printer led API
*/
func (a *Client) PutPrinterLed(params *PutPrinterLedParams) (*PutPrinterLedNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutPrinterLedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutPrinterLed",
		Method:             "PUT",
		PathPattern:        "/printer/led",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutPrinterLedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutPrinterLedNoContent), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
