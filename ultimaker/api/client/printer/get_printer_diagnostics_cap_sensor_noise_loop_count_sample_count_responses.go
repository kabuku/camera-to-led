package printer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// GetPrinterDiagnosticsCapSensorNoiseLoopCountSampleCountReader is a Reader for the GetPrinterDiagnosticsCapSensorNoiseLoopCountSampleCount structure.
type GetPrinterDiagnosticsCapSensorNoiseLoopCountSampleCountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPrinterDiagnosticsCapSensorNoiseLoopCountSampleCountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetPrinterDiagnosticsCapSensorNoiseLoopCountSampleCountOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetPrinterDiagnosticsCapSensorNoiseLoopCountSampleCountBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetPrinterDiagnosticsCapSensorNoiseLoopCountSampleCountOK creates a GetPrinterDiagnosticsCapSensorNoiseLoopCountSampleCountOK with default headers values
func NewGetPrinterDiagnosticsCapSensorNoiseLoopCountSampleCountOK() *GetPrinterDiagnosticsCapSensorNoiseLoopCountSampleCountOK {
	return &GetPrinterDiagnosticsCapSensorNoiseLoopCountSampleCountOK{}
}

/*GetPrinterDiagnosticsCapSensorNoiseLoopCountSampleCountOK handles this case with default header values.

A list of dictionairies containing the min, max, avg and stddev^2 values
*/
type GetPrinterDiagnosticsCapSensorNoiseLoopCountSampleCountOK struct {
}

func (o *GetPrinterDiagnosticsCapSensorNoiseLoopCountSampleCountOK) Error() string {
	return fmt.Sprintf("[GET /printer/diagnostics/cap_sensor_noise/{loop_count}/{sample_count}][%d] getPrinterDiagnosticsCapSensorNoiseLoopCountSampleCountOK ", 200)
}

func (o *GetPrinterDiagnosticsCapSensorNoiseLoopCountSampleCountOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPrinterDiagnosticsCapSensorNoiseLoopCountSampleCountBadRequest creates a GetPrinterDiagnosticsCapSensorNoiseLoopCountSampleCountBadRequest with default headers values
func NewGetPrinterDiagnosticsCapSensorNoiseLoopCountSampleCountBadRequest() *GetPrinterDiagnosticsCapSensorNoiseLoopCountSampleCountBadRequest {
	return &GetPrinterDiagnosticsCapSensorNoiseLoopCountSampleCountBadRequest{}
}

/*GetPrinterDiagnosticsCapSensorNoiseLoopCountSampleCountBadRequest handles this case with default header values.

When a timeout occurs (taking too long to get the data) or when the printer is already busy
*/
type GetPrinterDiagnosticsCapSensorNoiseLoopCountSampleCountBadRequest struct {
}

func (o *GetPrinterDiagnosticsCapSensorNoiseLoopCountSampleCountBadRequest) Error() string {
	return fmt.Sprintf("[GET /printer/diagnostics/cap_sensor_noise/{loop_count}/{sample_count}][%d] getPrinterDiagnosticsCapSensorNoiseLoopCountSampleCountBadRequest ", 400)
}

func (o *GetPrinterDiagnosticsCapSensorNoiseLoopCountSampleCountBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
