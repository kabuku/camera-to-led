package print_job

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/kabuku/camera-to-led/ultimaker/api/models"
)

// PostPrintJobReader is a Reader for the PostPrintJob structure.
type PostPrintJobReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostPrintJobReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewPostPrintJobCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostPrintJobCreated creates a PostPrintJobCreated with default headers values
func NewPostPrintJobCreated() *PostPrintJobCreated {
	return &PostPrintJobCreated{}
}

/*PostPrintJobCreated handles this case with default header values.

Print job accepted
*/
type PostPrintJobCreated struct {
	Payload PostPrintJobCreatedBody
}

func (o *PostPrintJobCreated) Error() string {
	return fmt.Sprintf("[POST /print_job][%d] postPrintJobCreated  %+v", 201, o.Payload)
}

func (o *PostPrintJobCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PostPrintJobCreatedBody post print job created body
swagger:model PostPrintJobCreatedBody
*/
type PostPrintJobCreatedBody struct {

	// message
	// Required: true
	Message *string `json:"message"`

	// uuid
	// Required: true
	UUID models.UUID `json:"uuid"`
}

// Validate validates this post print job created body
func (o *PostPrintJobCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateUUID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostPrintJobCreatedBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("postPrintJobCreated"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

func (o *PostPrintJobCreatedBody) validateUUID(formats strfmt.Registry) error {

	if err := o.UUID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("postPrintJobCreated" + "." + "uuid")
		}
		return err
	}

	return nil
}
