package authentication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPostAuthRequestParams creates a new PostAuthRequestParams object
// with the default values initialized.
func NewPostAuthRequestParams() *PostAuthRequestParams {
	var ()
	return &PostAuthRequestParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostAuthRequestParamsWithTimeout creates a new PostAuthRequestParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostAuthRequestParamsWithTimeout(timeout time.Duration) *PostAuthRequestParams {
	var ()
	return &PostAuthRequestParams{

		timeout: timeout,
	}
}

// NewPostAuthRequestParamsWithContext creates a new PostAuthRequestParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostAuthRequestParamsWithContext(ctx context.Context) *PostAuthRequestParams {
	var ()
	return &PostAuthRequestParams{

		Context: ctx,
	}
}

// NewPostAuthRequestParamsWithHTTPClient creates a new PostAuthRequestParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostAuthRequestParamsWithHTTPClient(client *http.Client) *PostAuthRequestParams {
	var ()
	return &PostAuthRequestParams{
		HTTPClient: client,
	}
}

/*PostAuthRequestParams contains all the parameters to send to the API endpoint
for the post auth request operation typically these are written to a http.Request
*/
type PostAuthRequestParams struct {

	/*Application
	  Name of the application that wants access. Displayed to the user.

	*/
	Application string
	/*User
	  Name of the user who wants access. Displayed to the user when confirming access.

	*/
	User string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post auth request params
func (o *PostAuthRequestParams) WithTimeout(timeout time.Duration) *PostAuthRequestParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post auth request params
func (o *PostAuthRequestParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post auth request params
func (o *PostAuthRequestParams) WithContext(ctx context.Context) *PostAuthRequestParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post auth request params
func (o *PostAuthRequestParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post auth request params
func (o *PostAuthRequestParams) WithHTTPClient(client *http.Client) *PostAuthRequestParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post auth request params
func (o *PostAuthRequestParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithApplication adds the application to the post auth request params
func (o *PostAuthRequestParams) WithApplication(application string) *PostAuthRequestParams {
	o.SetApplication(application)
	return o
}

// SetApplication adds the application to the post auth request params
func (o *PostAuthRequestParams) SetApplication(application string) {
	o.Application = application
}

// WithUser adds the user to the post auth request params
func (o *PostAuthRequestParams) WithUser(user string) *PostAuthRequestParams {
	o.SetUser(user)
	return o
}

// SetUser adds the user to the post auth request params
func (o *PostAuthRequestParams) SetUser(user string) {
	o.User = user
}

// WriteToRequest writes these params to a swagger request
func (o *PostAuthRequestParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// form param application
	frApplication := o.Application
	fApplication := frApplication
	if fApplication != "" {
		if err := r.SetFormParam("application", fApplication); err != nil {
			return err
		}
	}

	// form param user
	frUser := o.User
	fUser := frUser
	if fUser != "" {
		if err := r.SetFormParam("user", fUser); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
