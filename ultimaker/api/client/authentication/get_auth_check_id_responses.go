package authentication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// GetAuthCheckIDReader is a Reader for the GetAuthCheckID structure.
type GetAuthCheckIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAuthCheckIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetAuthCheckIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetAuthCheckIDOK creates a GetAuthCheckIDOK with default headers values
func NewGetAuthCheckIDOK() *GetAuthCheckIDOK {
	return &GetAuthCheckIDOK{}
}

/*GetAuthCheckIDOK handles this case with default header values.

result of the authorization check.
*/
type GetAuthCheckIDOK struct {
	Payload GetAuthCheckIDOKBody
}

func (o *GetAuthCheckIDOK) Error() string {
	return fmt.Sprintf("[GET /auth/check/{id}][%d] getAuthCheckIdOK  %+v", 200, o.Payload)
}

func (o *GetAuthCheckIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetAuthCheckIDOKBody get auth check ID o k body
swagger:model GetAuthCheckIDOKBody
*/
type GetAuthCheckIDOKBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this get auth check ID o k body
func (o *GetAuthCheckIDOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var getAuthCheckIdOKBodyTypeMessagePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["authorized","unauthorized","unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getAuthCheckIdOKBodyTypeMessagePropEnum = append(getAuthCheckIdOKBodyTypeMessagePropEnum, v)
	}
}

const (
	// GetAuthCheckIDOKBodyMessageAuthorized captures enum value "authorized"
	GetAuthCheckIDOKBodyMessageAuthorized string = "authorized"
	// GetAuthCheckIDOKBodyMessageUnauthorized captures enum value "unauthorized"
	GetAuthCheckIDOKBodyMessageUnauthorized string = "unauthorized"
	// GetAuthCheckIDOKBodyMessageUnknown captures enum value "unknown"
	GetAuthCheckIDOKBodyMessageUnknown string = "unknown"
)

// prop value enum
func (o *GetAuthCheckIDOKBody) validateMessageEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, getAuthCheckIdOKBodyTypeMessagePropEnum); err != nil {
		return err
	}
	return nil
}

func (o *GetAuthCheckIDOKBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("getAuthCheckIdOK"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	// value enum
	if err := o.validateMessageEnum("getAuthCheckIdOK"+"."+"message", "body", *o.Message); err != nil {
		return err
	}

	return nil
}
