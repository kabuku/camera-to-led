package authentication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// GetAuthVerifyReader is a Reader for the GetAuthVerify structure.
type GetAuthVerifyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAuthVerifyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetAuthVerifyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewGetAuthVerifyUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetAuthVerifyOK creates a GetAuthVerifyOK with default headers values
func NewGetAuthVerifyOK() *GetAuthVerifyOK {
	return &GetAuthVerifyOK{}
}

/*GetAuthVerifyOK handles this case with default header values.

Verify check successful, digest authentication is valid.
*/
type GetAuthVerifyOK struct {
	Payload GetAuthVerifyOKBody
}

func (o *GetAuthVerifyOK) Error() string {
	return fmt.Sprintf("[GET /auth/verify][%d] getAuthVerifyOK  %+v", 200, o.Payload)
}

func (o *GetAuthVerifyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthVerifyUnauthorized creates a GetAuthVerifyUnauthorized with default headers values
func NewGetAuthVerifyUnauthorized() *GetAuthVerifyUnauthorized {
	return &GetAuthVerifyUnauthorized{}
}

/*GetAuthVerifyUnauthorized handles this case with default header values.

Not authorized. Check or request your id/key combination, and/or http digest implementation.
*/
type GetAuthVerifyUnauthorized struct {
}

func (o *GetAuthVerifyUnauthorized) Error() string {
	return fmt.Sprintf("[GET /auth/verify][%d] getAuthVerifyUnauthorized ", 401)
}

func (o *GetAuthVerifyUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*GetAuthVerifyOKBody get auth verify o k body
swagger:model GetAuthVerifyOKBody
*/
type GetAuthVerifyOKBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this get auth verify o k body
func (o *GetAuthVerifyOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var getAuthVerifyOKBodyTypeMessagePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ok"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getAuthVerifyOKBodyTypeMessagePropEnum = append(getAuthVerifyOKBodyTypeMessagePropEnum, v)
	}
}

const (
	// GetAuthVerifyOKBodyMessageOk captures enum value "ok"
	GetAuthVerifyOKBodyMessageOk string = "ok"
)

// prop value enum
func (o *GetAuthVerifyOKBody) validateMessageEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, getAuthVerifyOKBodyTypeMessagePropEnum); err != nil {
		return err
	}
	return nil
}

func (o *GetAuthVerifyOKBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("getAuthVerifyOK"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	// value enum
	if err := o.validateMessageEnum("getAuthVerifyOK"+"."+"message", "body", *o.Message); err != nil {
		return err
	}

	return nil
}
