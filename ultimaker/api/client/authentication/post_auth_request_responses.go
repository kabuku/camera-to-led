package authentication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// PostAuthRequestReader is a Reader for the PostAuthRequest structure.
type PostAuthRequestReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostAuthRequestReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPostAuthRequestOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostAuthRequestOK creates a PostAuthRequestOK with default headers values
func NewPostAuthRequestOK() *PostAuthRequestOK {
	return &PostAuthRequestOK{}
}

/*PostAuthRequestOK handles this case with default header values.

Register as a new application that wants access to the API.
*/
type PostAuthRequestOK struct {
	Payload PostAuthRequestOKBody
}

func (o *PostAuthRequestOK) Error() string {
	return fmt.Sprintf("[POST /auth/request][%d] postAuthRequestOK  %+v", 200, o.Payload)
}

func (o *PostAuthRequestOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PostAuthRequestOKBody post auth request o k body
swagger:model PostAuthRequestOKBody
*/
type PostAuthRequestOKBody struct {

	// New ID that is unique as authentication token. This is the username part in the http digest authentication.
	// Required: true
	ID *string `json:"id"`

	// New key that is unique as authentication token. This is the password part in the http digest authentication.
	// Required: true
	Key *string `json:"key"`
}

// Validate validates this post auth request o k body
func (o *PostAuthRequestOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateKey(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostAuthRequestOKBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("postAuthRequestOK"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *PostAuthRequestOKBody) validateKey(formats strfmt.Registry) error {

	if err := validate.Required("postAuthRequestOK"+"."+"key", "body", o.Key); err != nil {
		return err
	}

	return nil
}
