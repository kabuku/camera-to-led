package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// System Meta data on the system.
// swagger:model System
type System struct {

	// guid
	GUID string `json:"guid,omitempty"`

	// hardware
	Hardware *SystemHardware `json:"hardware,omitempty"`

	// hostname
	Hostname string `json:"hostname,omitempty"`

	// log
	Log string `json:"log,omitempty"`

	// memory
	Memory *SystemMemory `json:"memory,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// platform
	Platform string `json:"platform,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// variant
	Variant string `json:"variant,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this system
func (m *System) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHardware(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMemory(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *System) validateHardware(formats strfmt.Registry) error {

	if swag.IsZero(m.Hardware) { // not required
		return nil
	}

	if m.Hardware != nil {

		if err := m.Hardware.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hardware")
			}
			return err
		}
	}

	return nil
}

func (m *System) validateMemory(formats strfmt.Registry) error {

	if swag.IsZero(m.Memory) { // not required
		return nil
	}

	if m.Memory != nil {

		if err := m.Memory.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("memory")
			}
			return err
		}
	}

	return nil
}

// SystemHardware system hardware
// swagger:model SystemHardware
type SystemHardware struct {

	// revision
	Revision int64 `json:"revision,omitempty"`

	// typeid
	Typeid int64 `json:"typeid,omitempty"`
}

// Validate validates this system hardware
func (m *SystemHardware) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// SystemMemory system memory
// swagger:model SystemMemory
type SystemMemory struct {

	// total
	Total int64 `json:"total,omitempty"`

	// used
	Used int64 `json:"used,omitempty"`
}

// Validate validates this system memory
func (m *SystemMemory) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
