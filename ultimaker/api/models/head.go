package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Head Head of a printer. May contain multiple extruders. Heads can be uniquely identified by ID. The id is an integer starting at 0.
// swagger:model Head
type Head struct {

	// The default acceleration for the X, Y and Z axis
	Acceleration float64 `json:"acceleration,omitempty"`

	// extruders
	Extruders []*Extruder `json:"extruders"`

	// jerk
	Jerk *XYZ `json:"jerk,omitempty"`

	// max speed
	MaxSpeed *XYZ `json:"max_speed,omitempty"`

	// position
	Position *XYZ `json:"position,omitempty"`
}

// Validate validates this head
func (m *Head) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExtruders(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateJerk(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMaxSpeed(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePosition(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Head) validateExtruders(formats strfmt.Registry) error {

	if swag.IsZero(m.Extruders) { // not required
		return nil
	}

	for i := 0; i < len(m.Extruders); i++ {

		if swag.IsZero(m.Extruders[i]) { // not required
			continue
		}

		if m.Extruders[i] != nil {

			if err := m.Extruders[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("extruders" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Head) validateJerk(formats strfmt.Registry) error {

	if swag.IsZero(m.Jerk) { // not required
		return nil
	}

	if m.Jerk != nil {

		if err := m.Jerk.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jerk")
			}
			return err
		}
	}

	return nil
}

func (m *Head) validateMaxSpeed(formats strfmt.Registry) error {

	if swag.IsZero(m.MaxSpeed) { // not required
		return nil
	}

	if m.MaxSpeed != nil {

		if err := m.MaxSpeed.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("max_speed")
			}
			return err
		}
	}

	return nil
}

func (m *Head) validatePosition(formats strfmt.Registry) error {

	if swag.IsZero(m.Position) { // not required
		return nil
	}

	if m.Position != nil {

		if err := m.Position.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("position")
			}
			return err
		}
	}

	return nil
}
