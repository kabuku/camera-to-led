package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Blink A description of a LED blink pattern
// swagger:model Blink
type Blink struct {

	// The number of times the blinking should be repeated; defaults to once.
	// Minimum: 1
	Count float64 `json:"count,omitempty"`

	// Determine how fast the blink will happen (in Hz); defaults to 1Hz;
	// Minimum: 0.1
	Frequency float64 `json:"frequency,omitempty"`
}

// Validate validates this blink
func (m *Blink) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCount(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFrequency(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Blink) validateCount(formats strfmt.Registry) error {

	if swag.IsZero(m.Count) { // not required
		return nil
	}

	if err := validate.Minimum("count", "body", float64(m.Count), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *Blink) validateFrequency(formats strfmt.Registry) error {

	if swag.IsZero(m.Frequency) { // not required
		return nil
	}

	if err := validate.Minimum("frequency", "body", float64(m.Frequency), 0.1, false); err != nil {
		return err
	}

	return nil
}
