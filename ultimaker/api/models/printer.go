package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Printer printer
// swagger:model Printer
type Printer struct {

	// bed
	Bed *Bed `json:"bed,omitempty"`

	// camera
	Camera *Camera `json:"camera,omitempty"`

	// heads
	// Required: true
	Heads []*Head `json:"heads"`

	// led
	Led *Led `json:"led,omitempty"`

	// network
	Network Network `json:"network,omitempty"`

	// status
	Status string `json:"status,omitempty"`
}

// Validate validates this printer
func (m *Printer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBed(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCamera(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHeads(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLed(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNetwork(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Printer) validateBed(formats strfmt.Registry) error {

	if swag.IsZero(m.Bed) { // not required
		return nil
	}

	if m.Bed != nil {

		if err := m.Bed.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bed")
			}
			return err
		}
	}

	return nil
}

func (m *Printer) validateCamera(formats strfmt.Registry) error {

	if swag.IsZero(m.Camera) { // not required
		return nil
	}

	if m.Camera != nil {

		if err := m.Camera.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("camera")
			}
			return err
		}
	}

	return nil
}

func (m *Printer) validateHeads(formats strfmt.Registry) error {

	if err := validate.Required("heads", "body", m.Heads); err != nil {
		return err
	}

	for i := 0; i < len(m.Heads); i++ {

		if swag.IsZero(m.Heads[i]) { // not required
			continue
		}

		if m.Heads[i] != nil {

			if err := m.Heads[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("heads" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Printer) validateLed(formats strfmt.Registry) error {

	if swag.IsZero(m.Led) { // not required
		return nil
	}

	if m.Led != nil {

		if err := m.Led.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("led")
			}
			return err
		}
	}

	return nil
}

func (m *Printer) validateNetwork(formats strfmt.Registry) error {

	if swag.IsZero(m.Network) { // not required
		return nil
	}

	if err := m.Network.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("network")
		}
		return err
	}

	return nil
}

var printerTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["booting","idle","printing","error","maintenance"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		printerTypeStatusPropEnum = append(printerTypeStatusPropEnum, v)
	}
}

const (
	// PrinterStatusBooting captures enum value "booting"
	PrinterStatusBooting string = "booting"
	// PrinterStatusIDLE captures enum value "idle"
	PrinterStatusIDLE string = "idle"
	// PrinterStatusPrinting captures enum value "printing"
	PrinterStatusPrinting string = "printing"
	// PrinterStatusError captures enum value "error"
	PrinterStatusError string = "error"
	// PrinterStatusMaintenance captures enum value "maintenance"
	PrinterStatusMaintenance string = "maintenance"
)

// prop value enum
func (m *Printer) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, printerTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Printer) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}
