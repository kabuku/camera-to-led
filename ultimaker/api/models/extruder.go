package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Extruder Extruder drive train. Includes the feeder & nozzle. Note that its id can never be lower than 0 and should be seen as an index.
// swagger:model Extruder
type Extruder struct {

	// active material
	ActiveMaterial *Material `json:"active_material,omitempty"`

	// feeder
	Feeder *Feeder `json:"feeder,omitempty"`

	// hotend
	Hotend *Hotend `json:"hotend,omitempty"`
}

// Validate validates this extruder
func (m *Extruder) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActiveMaterial(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFeeder(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHotend(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Extruder) validateActiveMaterial(formats strfmt.Registry) error {

	if swag.IsZero(m.ActiveMaterial) { // not required
		return nil
	}

	if m.ActiveMaterial != nil {

		if err := m.ActiveMaterial.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("active_material")
			}
			return err
		}
	}

	return nil
}

func (m *Extruder) validateFeeder(formats strfmt.Registry) error {

	if swag.IsZero(m.Feeder) { // not required
		return nil
	}

	if m.Feeder != nil {

		if err := m.Feeder.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("feeder")
			}
			return err
		}
	}

	return nil
}

func (m *Extruder) validateHotend(formats strfmt.Registry) error {

	if swag.IsZero(m.Hotend) { // not required
		return nil
	}

	if m.Hotend != nil {

		if err := m.Hotend.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hotend")
			}
			return err
		}
	}

	return nil
}
