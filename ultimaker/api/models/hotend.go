package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Hotend A single hotend
// swagger:model Hotend
type Hotend struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// offset
	Offset *HotendOffset `json:"offset,omitempty"`

	// A hexadecimal representation of the serial number
	Serial string `json:"serial,omitempty"`

	// statistics
	Statistics *HotendStatistics `json:"statistics,omitempty"`

	// temperature
	Temperature *CurrentTargetNumberPair `json:"temperature,omitempty"`
}

// Validate validates this hotend
func (m *Hotend) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOffset(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatistics(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTemperature(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Hotend) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Hotend) validateOffset(formats strfmt.Registry) error {

	if swag.IsZero(m.Offset) { // not required
		return nil
	}

	if m.Offset != nil {

		if err := m.Offset.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("offset")
			}
			return err
		}
	}

	return nil
}

func (m *Hotend) validateStatistics(formats strfmt.Registry) error {

	if swag.IsZero(m.Statistics) { // not required
		return nil
	}

	if m.Statistics != nil {

		if err := m.Statistics.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("statistics")
			}
			return err
		}
	}

	return nil
}

func (m *Hotend) validateTemperature(formats strfmt.Registry) error {

	if swag.IsZero(m.Temperature) { // not required
		return nil
	}

	if m.Temperature != nil {

		if err := m.Temperature.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("temperature")
			}
			return err
		}
	}

	return nil
}
